// Java Programming Language.
// Practice algorithms & data structures.
// Coding Style.
// API, libraries.
// Algorithms ---> Elegant, bug-free Java code.
// Prerequisite: Install JDK, IDE.

// Semantics VS. Implementations.
// Semantics: language specifications define semantics. (eg. recipy) -- preresent the meaning of the program.
// Implementation: defines the actual behavior of a program. (eg. cooking) -- present how to implement a program.
// For example: 
   int i = 0;  // set i to be 0; --> read i = 0 (CPU)
   i++; // Now i = 1; write new value 1 back to i's memory location.

// Basic Concepts in Java.
// Object-Oriented Programming: everything is an object in Java. :)
// OOP: each object has a type (int, long, boolean, etc.)
// OOP: each object is defined by state (field) and behavior (method).
// Class: define a type of the object. Class -> Type.
// Object: instance. Each instance has its own states (fields). Object -> Instance.
// Oject in Java could be an array, list, queue, stack, tree, heap, program, etc.
// Object is stored in the Heap.
// Primitive types: 8 primitive types in Java are NOT object(s).
// Reference: a namecard (file) with the address of an object (instance). Reference -> Address.
// Dereferencing: visit the object with the address written on the namecard (reference).
// Object-Oriented Design (OOD)
// Encapsulation
// Inheritance
// Polymorphism
// Create an object: Object firstObject = new Object("int");
// Declare an object: Object firstObject
// Instantiation (instance): new -> create an object. (eg. build a house & a namecard refer to the house)
// "firstObject" is a field; it is a reference of data type "Object". // create an object in the memory and return its reference to firstObject.
// Initialization: call constructor to initialize a new object.

// What does an object look like in Java? --- Object Memory Layout
// Memeory spaces in a Java program: stack & heap.
// Stack: FILO (like a trash can).
// Stack: in cs, a call stack (program stack) is a stack daata structure that stores information about the active subroutlines of a computer program.
// Stack is used when a method call a method (could be itself, like recursion).Call stack is an area in memory.
//        eg. main -> foo -> bar -> test.
// Call Stack is in every Java program. Call stack is an area in memory.
// Breaking Point: call stack. After current method is executed, return previous breaking point.
// Stack variable has the lifetime of the function of scope. When current method is implemented, the result is saved in currentcall stack and the result is NOT accessible/visitable/visible for amy method then.

// Heap: In Java, objects reside in an area called the heap. a Heap is created when the JVM starts up and the size of the heap could increase or decrease.
// Heap: dynamic allocated object. Heap is used to store objects that are created by method 'new'.
// In Java, all the objects are stored in Heap. But NOT all the references are in stack.
// Primitive types may be in a stack or in an object.
// Method 'new' is used in instantiation.
// Space complexity: extra memory (except input and output) used to implement a program.
// In java, a field is belong to a mothod / object / etc. There is no local field / global field in Java.
// Gabage Collector: In Java, it is not certain to know when GC works.
// Methods are stored in stack. Objects are stored in Heap.

// "Hello World!"
// HelloWorld.java -> only one 'public class' in each .java profile.
public class HelloWorld {         // Capital letter for the first letter in a class.
      public static void main (String[] args) {
            System.out.println("Hello World!");
      }
}
// In Java, program itself is an object. All the methods/functions are in the same class.
// In Java, camel coding style. (http://google.github.io/styleguide/javaguide.html)
// "public static void main (String[] args)" is the main entrance of any Java program.
// "main" method.
// Static: not necessary to create field in the method.
// Void: NOT return anything.
// Method / Function: how to identify method by itself? --- Method Signature (method name and the list of parameter types; NO return value types, NO exception list).
// Constructor
// Constant Field
// Static Field
// Static Constant Field

// Primitive Types (8) in Java: boolean, byte, char, short, int, long, float, double.
// Primitive types are NOT objects; NO field; NO method.
// Constructor: this and null pointer.
// Constructor: a special method to initialize objects, must have the same name as the class.
// Constructor: is used to parameterly create objects. 
// In Java, constructor's name is the same as Class's name.
// This: The current (self) instance. --- itself. (this.age = age;) The object that calls the function is "this".
// Example: firstObject.setAge(10) ---> "this" means "firstObject".
// "This" is mandatory to be written down if argument name is the same as field name.
public class Object {
      String table;
      coid setName (String table) {
            this.table = table;   // this.table ---> "table" is field's name. The right side is the input parameter.
      }
}

// Null: an empty reference. (There is no namecard that points to an object.)
// NullPointerException
// Null is NOT an object. It is a value.

// Final: once assigned, cannot be changed.
// Final class: A class that cannot be derived. (a class could NOT be inherited)
// Final Method: A method that cannot be overridden.
// Final Field: A field that once assigned, cannot be assigned again.

