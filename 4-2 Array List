// Class List in Java: is used to represent data in squence. 
// List<String> myList = new ArrayList<>();
// Implement List in Java.
// Array: access element, add element, delete element, remove element...

// Array: array.length could NOT be changed once the array is created.
// Insert an element in a full-size array: creat a new array with 1.5 times length of original array; 
//        and then copy all the elements in original array to new array;
//        and assign the next element's value to be the new element's value.

// ArrayList: use array to implement list.
// Size VS. Length VS. Capacity: size is the value of the # of non-null element in an array.
// Append an element in an array.
// Step1: Check if (full-size == length)
// Step2: If the array is full, creat a new array with 1.5 times length of original array;
// Step3: Copy all the elements in original array to new array;
// Step4: Assign the next element's value to be the new element's value.
// Take away: the length could be expanded several times.

// Insert an element in given index in an array. (eg: call add(2, 5) -> insert element "5" to index 2)
// Step1: check the array; expand if necessary.
// Step2: Right move all the elements after given inserted idex by 1.
// Step3: Set the element at given inserted index.

// LinkedList: backend by a doubly Linked List. (N1 <--> N2). 
// Eager Computation: size() --- O(1) Maintain LinkedList's / ArrayList's length.
// Lazy Computation
// Concurrent Hash Map: Eager Computation does NOT work well.

// Method isEmpty()
      public boolean isEmpty() {
            if (size == 0) {
                  return true;
            } else {
                  return false;
            }
      }
// Time Complexity Analysis: ArrayList VS. LinkedList
//                                              ArrayList            LinkedList
//      - get(int index) at head / tail           O(1)                  O(1) <-- bcs of doubly Linked List backend
//      - get(int index) in middle                O(1)                  O(n)
//      - set(int index) at head / tail           O(1)                  O(1)
//      - set(int index) in middle                O(1)                  O(n)
//      - add(int index, E e) in middle           O(n) <- right shift   O(n) <- Find middle fist and do insertion
//      - add(int index, E e) at head             O(n) <- right shift   O(1) <- head is the first element
//      - add(E e) at tail (not full-szie)        O(1) <- append        O(1) <- backedn doubly Linked List
//      - add(E e) at tail (is full-szie)         O(n) <- append        O(1) <- backedn doubly Linked List
//      - remove(int index) at head               O(n) <- left shift    O(1)
//      - remove(int index) at tail               O(1)                  O(1)
//      - remove(int index) at middle             O(n) <- left shift    O(n) <- find middle first
//      - size()                                  O(1)                  O(1)
//      - isEmpty()                               O(1)                  O(1)
