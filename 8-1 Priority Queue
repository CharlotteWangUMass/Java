// PriorityQueue (Heap)
// PriorityQueue ---> Array (flatten a heap to an array)
// PriorityQueue is a heap with the same Queue interface with offer(), peek() and poll().
// PriorityQueue: NOT FIFO. When poll() or peek(), always look at the smallest / greatest element.
//       Because PriorityQueue is a minHeap / maxHeap.
// PriorityQueue: like waiting queues at airport --- multiple classes.
// The PriorityQueue will arrance the elements based on the order of the elements (which one is smaller / greater by comparing any two elements)
//      and it is optimized for problems about "which one is the smallest / greatest element".

// Commons APIs in PriorityQueue
//      - offer(E e): O(logn) <- Insert one element into the Heap.
//      - peek(): O(1) <- peek the top element in the Heap.
//      - poll(): O(logn) <- Remove the top element from the heap and return to smallest / greatest element
//      - remove(): O(logn) <- from AbstractQueue (remove element at the head); remove(object):O(n) <- GC (delete given element)
//      - size(): O(1)
//      - isEmpty():O(1)

// PriorityQueue: how to define priority? How to compare any two elements?
// Solution1: Comparable Interface 
//      - Java Comparable Interface: compareTo()
//      - PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();
//        Interface Comparable<E> {
//              int compareTo(E ele);
//        }
//        
//        class Integer implements Comparable<Integer> {
//              private int value;
//              public Integer (int value) {
//              @override
//              public int compareTo(Integer another) {
//                    if (this value == another value) {
//                          return 0;
//                    }
//              return this.value<another.value> ? -1 : 1;
//              }
//        }
//
//    We use comparableTo(another) to define the order that in a PriorityQueue. (The smaller the number, the higher the priority)
//       * 0 -> this and another value are of same priority
//       * -1 (< 0) -> this has higher priority than another
//       * 1 (>0) -> this has less priority than another
// 
// Example: Compare two cells with their value in the matrix. Suupose there is a Matrix, each row is sorted by ascending order
//          and each column is sorted by ascending order. Write a class to represent each cell in the matrix and compare two cells in it.
// Solution:

class Cell {
      public int row;
      public int col;
      public int value;
      public Cell (int row, int col, int value) {
            this.row = row;
            this.cell = cell;
            this.value = value;
      }
      
      PriorityQueue<Cell> minHeap = new PriorityQueue<Cell>;
      Cell c1 = new Cell (0, 0, 0);
      Cell c2 = new Cell (0, 1, 2);
      minHeap.offer(c1);
      minHeap.offer(c2);
}      
      
class Cell {
      public int row;
      public int col;
      public int value;
      public Cell (int row, int col, int value) {
            this.row = row;
            this'cell = cell;
            this.value = value;
      }
      
      @Override
      public int compareTo (Cell another) {
            if (this.value == another.value) {
                  return 0;
            }
            return this.value <another.value> ? -1 : 1;
       }
 }
 
 
// To compare two cell objects, use the compareTo() method.
//      Cell c1 = new Cell(0,0,0);
//      Cell c2 = new Cell(0,1,2);
//      int result = c1.compareTo(c2);
//      return -1;  // c1 priority higher than c2, because c1's value is less than c2's value in this minHeap.

